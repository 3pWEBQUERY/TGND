generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  hashedPassword String?
  role           UserRole  @default(MEMBER)
  accounts       Account[]
  comments       Comment[]
  followers      Follow[]  @relation("Follower")
  following      Follow[]  @relation("Following")
  likes          Like[]
  posts          Post[]
  profile        Profile?
  replies        Reply[]
  sessions       Session[]
  votes          Vote[]
}

model Profile {
  id           String   @id @default(cuid())
  userId       String   @unique
  bio          String?
  location     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  age          Int?
  displayName  String?
  gender       String?
  isVerified   Boolean  @default(false)
  profileImage String?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id          String    @id @default(cuid())
  content     String
  images      String[]
  videos      String[]
  type        String    @default("standard")
  location    String?
  authorId    String
  isPublished Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  comments    Comment[]
  likes       Like[]
  poll        Poll?
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
}

model Poll {
  id       String       @id @default(cuid())
  postId   String       @unique
  question String
  post     Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
  options  PollOption[]
}

model PollOption {
  id     String @id @default(cuid())
  pollId String
  text   String
  poll   Poll   @relation(fields: [pollId], references: [id], onDelete: Cascade)
  votes  Vote[]

  @@index([pollId])
}

model Vote {
  id        String     @id @default(cuid())
  userId    String
  optionId  String
  createdAt DateTime   @default(now())
  option    PollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, optionId])
  @@index([userId])
  @@index([optionId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  likes     Like[]
  replies   Reply[]

  @@index([authorId])
  @@index([postId])
}

model Reply {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  commentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  likes     Like[]
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([commentId])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String?
  commentId String?
  replyId   String?
  createdAt DateTime @default(now())
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  reply     Reply?   @relation(fields: [replyId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId, commentId, replyId])
  @@index([userId])
  @@index([postId])
  @@index([commentId])
  @@index([replyId])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  ADMIN
  MEMBER
  ESCORT
  AGENCY
  CLUB
  STUDIO
}
